# An√°lisis de Negocio - Formula 1 Machine Learning

## 1. Introducci√≥n

Este notebook presenta el entendimiento del negocio y an√°lisis exploratorio para el proyecto de predicci√≥n en Formula 1. Se identificar√°n dos casos de uso principales:

1. **Caso de Regresi√≥n**: Predicci√≥n del tiempo de vuelta promedio de un piloto en una carrera
2. **Caso de Clasificaci√≥n**: Predicci√≥n de si un piloto terminar√° en el podio (Top 3)

### 1.1 Objetivos del An√°lisis

- Comprender la estructura y relaciones entre los datasets de Formula 1
- Identificar variables clave para predicciones
- Definir m√©tricas de √©xito y valor de negocio
- Establecer un plan de implementaci√≥n claro


## 2. Configuraci√≥n del Entorno

# Importaci√≥n de librer√≠as necesarias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de visualizaci√≥n
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 100)
pd.set_option('display.float_format', lambda x: '%.3f' % x)


## 3. Carga y Exploraci√≥n de Datos

### 3.1 Carga de Datasets

# Definici√≥n de rutas de datos
DATA_PATH = '../data/01_raw/'

# Diccionario para almacenar todos los datasets
datasets = {}

# Lista de archivos a cargar
files_to_load = [
    'Driver_Details.csv',
    'Driver_Rankings.csv',
    'Constructor_Performance.csv',
    'Constructor_Rankings.csv',
    'Race_Results.csv',
    'Qualifying_Results.csv',
    'Lap_Timings.csv',
    'Pit_Stop_Records.csv',
    'Race_Schedule.csv',
    'Race_Status.csv',
    'Season_Summaries.csv',
    'Sprint_Race_Results.csv',
    'Team_Details.csv',
    'Track_Information.csv'
]

# Carga de todos los datasets
print("Cargando datasets de Formula 1...\n")
for file in files_to_load:
    dataset_name = file.replace('.csv', '').lower()
    try:
        datasets[dataset_name] = pd.read_csv(DATA_PATH + file)
        print(f"‚úì {file} cargado exitosamente")
    except Exception as e:
        print(f"‚úó Error cargando {file}: {e}")

print(f"\nTotal de datasets cargados: {len(datasets)}")



### 3.2 Descripci√≥n de Tablas

An√°lisis detallado de cada tabla y su prop√≥sito en el contexto de Formula 1:

# Descripci√≥n de cada dataset
dataset_descriptions = {
    'driver_details': 'Informaci√≥n personal y demogr√°fica de pilotos (nombre, nacionalidad, fecha de nacimiento)',
    'driver_rankings': 'Rankings hist√≥ricos de pilotos por temporada y carrera',
    'constructor_performance': 'Rendimiento de constructores/equipos por carrera',
    'constructor_rankings': 'Rankings de constructores en el campeonato',
    'race_results': 'Resultados detallados de cada carrera (posiciones, puntos, tiempos)',
    'qualifying_results': 'Resultados de sesiones de clasificaci√≥n (Q1, Q2, Q3)',
    'lap_timings': 'Tiempos de vuelta individuales durante las carreras',
    'pit_stop_records': 'Registros de paradas en boxes (duraci√≥n, vuelta)',
    'race_schedule': 'Calendario de carreras con fechas y ubicaciones',
    'race_status': 'Estados finales de pilotos en carreras (finalizado, retirado, etc.)',
    'season_summaries': 'Res√∫menes estad√≠sticos por temporada',
    'sprint_race_results': 'Resultados de carreras sprint (formato especial)',
    'team_details': 'Informaci√≥n de equipos/constructores',
    'track_information': 'Caracter√≠sticas de circuitos (ubicaci√≥n, longitud, pa√≠s)'
}

print("DESCRIPCI√ìN DE DATASETS\n" + "="*80)
for name, description in dataset_descriptions.items():
    if name in datasets:
        df = datasets[name]
        print(f"\nüìä {name.upper().replace('_', ' ')}")
        print(f"   Descripci√≥n: {description}")
        print(f"   Dimensiones: {df.shape[0]:,} filas √ó {df.shape[1]} columnas")
        print(f"   Columnas: {', '.join(df.columns[:8])}{'...' if len(df.columns) > 8 else ''}")

### 3.3 An√°lisis de Estructura de Datos

# An√°lisis detallado de cada dataset
def analyze_dataset(df, name):
    """An√°lisis completo de un dataset"""
    print(f"\n{'='*80}")
    print(f"AN√ÅLISIS DE: {name.upper().replace('_', ' ')}")
    print(f"{'='*80}")
    
    # Informaci√≥n b√°sica
    print(f"\nüìã Informaci√≥n General:")
    print(f"   - Total de registros: {len(df):,}")
    print(f"   - Total de columnas: {len(df.columns)}")
    print(f"   - Memoria utilizada: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB")
    
    # Tipos de datos
    print(f"\nüìä Tipos de Datos:")
    dtype_counts = df.dtypes.value_counts()
    for dtype, count in dtype_counts.items():
        print(f"   - {dtype}: {count} columnas")
    
    # Valores nulos
    null_counts = df.isnull().sum()
    null_cols = null_counts[null_counts > 0]
    
    if len(null_cols) > 0:
        print(f"\n‚ö†Ô∏è Columnas con Valores Nulos:")
        for col, count in null_cols.items():
            percentage = (count / len(df)) * 100
            print(f"   - {col}: {count:,} ({percentage:.1f}%)")
    else:
        print(f"\n‚úì No hay valores nulos en este dataset")
    
    # Columnas clave identificadas
    print(f"\nüîë Columnas del Dataset:")
    for i, col in enumerate(df.columns, 1):
        dtype_str = str(df[col].dtype)
        print(f"   {i:2}. {col:30} ({dtype_str})")
    
    # Estad√≠sticas para columnas num√©ricas
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    if len(numeric_cols) > 0:
        print(f"\nüìà Resumen Estad√≠stico (columnas num√©ricas):")
        print(df[numeric_cols].describe().round(2).to_string())
    
    return df.info()

# Analizar datasets principales
key_datasets = ['race_results', 'driver_details', 'lap_timings', 'qualifying_results']
for dataset_name in key_datasets:
    if dataset_name in datasets:
        analyze_dataset(datasets[dataset_name], dataset_name)


## 4. Entendimiento del Negocio

### 4.1 Contexto de Formula 1

La Formula 1 representa el pin√°culo del automovilismo mundial, donde la combinaci√≥n de:
- **Tecnolog√≠a**: Desarrollo aereodin√°mico, motores h√≠bridos, telemetr√≠a avanzada
- **Estrategia**: Gesti√≥n de neum√°ticos, paradas en boxes, consumo de combustible
- **Talento humano**: Habilidad de pilotos, decisiones de ingenieros

determina el √©xito en cada carrera.

### 4.2 Stakeholders y sus Necesidades

# Definici√≥n de stakeholders y casos de uso
stakeholders = pd.DataFrame({
    'Stakeholder': [
        'Equipos de F1',
        'Pilotos',
        'Patrocinadores',
        'Medios de Comunicaci√≥n',
        'Aficionados',
        'Casas de Apuestas',
        'FIA/Organizadores'
    ],
    'Necesidad Principal': [
        'Optimizaci√≥n de estrategia de carrera',
        'An√°lisis de rendimiento personal',
        'ROI de inversi√≥n y visibilidad',
        'Contenido anal√≠tico y predicciones',
        'Insights y estad√≠sticas interesantes',
        'Modelos de probabilidad precisos',
        'An√°lisis de competitividad y seguridad'
    ],
    'Valor del ML': [
        'Decisiones estrat√©gicas basadas en datos',
        'Identificaci√≥n de √°reas de mejora',
        'Predicci√≥n de exposici√≥n medi√°tica',
        'Generaci√≥n autom√°tica de contenido',
        'Experiencia enriquecida',
        'Mejora en precisi√≥n de cuotas',
        'Detecci√≥n de patrones y anomal√≠as'
    ]
})

print("AN√ÅLISIS DE STAKEHOLDERS")
print("="*100)
print(stakeholders.to_string(index=False))



## 5. Definici√≥n de Casos de Uso de Machine Learning

### 5.1 Caso de Regresi√≥n: Predicci√≥n de Tiempo de Vuelta Promedio

# Exploraci√≥n para caso de regresi√≥n
print("CASO DE USO 1: REGRESI√ìN - Predicci√≥n de Tiempo de Vuelta Promedio")
print("="*80)

# An√°lisis de tiempos de vuelta
if 'lap_timings' in datasets:
    lap_data = datasets['lap_timings']
    
    print("\nüìä An√°lisis de Tiempos de Vuelta:")
    print(f"   - Total de registros de vueltas: {len(lap_data):,}")
    
    # Verificar columnas disponibles
    if 'LapTime' in lap_data.columns:
        # Estad√≠sticas de tiempos
        lap_stats = lap_data['LapTime'].describe()
        print(f"\n   Estad√≠sticas de Tiempos de Vuelta:")
        print(f"   - Tiempo promedio: {lap_stats['mean']:.2f} segundos")
        print(f"   - Desviaci√≥n est√°ndar: {lap_stats['std']:.2f} segundos")
        print(f"   - Tiempo m√≠nimo: {lap_stats['min']:.2f} segundos")
        print(f"   - Tiempo m√°ximo: {lap_stats['max']:.2f} segundos")

# Definici√≥n del problema de regresi√≥n
regression_problem = pd.DataFrame({
    'Aspecto': [
        'Variable Objetivo',
        'Variables Predictoras',
        'M√©trica Principal',
        'M√©tricas Secundarias',
        'Valor de Negocio',
        'Desaf√≠os T√©cnicos'
    ],
    'Descripci√≥n': [
        'Tiempo promedio de vuelta en una carrera espec√≠fica',
        'Posici√≥n de salida, tiempos de clasificaci√≥n, hist√≥rico del piloto, caracter√≠sticas del circuito, condiciones clim√°ticas',
        'Mean Absolute Error (MAE) en segundos',
        'RMSE, R¬≤, MAPE',
        'Optimizaci√≥n de estrategia de neum√°ticos y combustible durante la carrera',
        'Variabilidad por condiciones clim√°ticas, incidentes en pista, safety cars'
    ]
})

print("\nüìã Definici√≥n del Problema de Regresi√≥n:")
for _, row in regression_problem.iterrows():
    print(f"\n   {row['Aspecto']}:")
    print(f"   ‚Üí {row['Descripci√≥n']}")


### 5.2 Caso de Clasificaci√≥n: Predicci√≥n de Podio

# Exploraci√≥n para caso de clasificaci√≥n
print("CASO DE USO 2: CLASIFICACI√ìN - Predicci√≥n de Podio (Top 3)")
print("="*80)

# An√°lisis de resultados de carrera
if 'race_results' in datasets:
    race_data = datasets['race_results']
    
    print("\nüìä An√°lisis de Resultados de Carrera:")
    print(f"   - Total de resultados: {len(race_data):,}")
    
    # An√°lisis de podios si existe la columna Position
    if 'position' in race_data.columns or 'Position' in race_data.columns:
        pos_col = 'Position' if 'Position' in race_data.columns else 'position'
        
        # Calcular estad√≠sticas de podios
        try:
            # Convertir a num√©rico, manejar valores no num√©ricos
            race_data['position_numeric'] = pd.to_numeric(race_data[pos_col], errors='coerce')
            
            podium_count = race_data[race_data['position_numeric'] <= 3].shape[0]
            total_finishers = race_data[race_data['position_numeric'].notna()].shape[0]
            
            if total_finishers > 0:
                podium_rate = (podium_count / total_finishers) * 100
                print(f"\n   Estad√≠sticas de Podios:")
                print(f"   - Total de podios: {podium_count:,}")
                print(f"   - Total de finalistas: {total_finishers:,}")
                print(f"   - Tasa de podio: {podium_rate:.2f}%")
        except Exception as e:
            print(f"   - Error calculando estad√≠sticas: {e}")

# Definici√≥n del problema de clasificaci√≥n
classification_problem = pd.DataFrame({
    'Aspecto': [
        'Variable Objetivo',
        'Clases',
        'Variables Predictoras',
        'M√©trica Principal',
        'M√©tricas Secundarias',
        'Valor de Negocio',
        'Desaf√≠os T√©cnicos'
    ],
    'Descripci√≥n': [
        'Finalizaci√≥n en podio (S√≠/No)',
        'Binaria: 1 (Podio: posiciones 1-3), 0 (No podio: posici√≥n 4+)',
        'Posici√≥n de clasificaci√≥n, rendimiento reciente, hist√≥rico en el circuito, fiabilidad del coche',
        'F1-Score (balance entre precisi√≥n y recall)',
        'Accuracy, Precision, Recall, AUC-ROC',
        'Apoyo en decisiones de apuestas, estrategias de equipo, contenido medi√°tico',
        'Desbalance de clases (solo ~15% son podios), alta variabilidad por incidentes'
    ]
})

print("\nüìã Definici√≥n del Problema de Clasificaci√≥n:")
for _, row in classification_problem.iterrows():
    print(f"\n   {row['Aspecto']}:")
    print(f"   ‚Üí {row['Descripci√≥n']}")



## 6. An√°lisis de Calidad de Datos

# Evaluaci√≥n de calidad de datos
print("EVALUACI√ìN DE CALIDAD DE DATOS")
print("="*80)

quality_metrics = []

for name, df in datasets.items():
    total_cells = df.shape[0] * df.shape[1]
    null_cells = df.isnull().sum().sum()
    completeness = ((total_cells - null_cells) / total_cells * 100) if total_cells > 0 else 0
    
    # Verificar duplicados si hay columnas que puedan ser identificadores
    duplicate_rows = 0
    if len(df) > 0:
        duplicate_rows = df.duplicated().sum()
    
    quality_metrics.append({
        'Dataset': name.replace('_', ' ').title(),
        'Filas': f"{len(df):,}",
        'Columnas': df.shape[1],
        'Completitud (%)': f"{completeness:.1f}",
        'Duplicados': duplicate_rows,
        'Calidad': '‚úì Alta' if completeness > 95 and duplicate_rows == 0 else 
                   '‚ö† Media' if completeness > 80 else '‚úó Baja'
    })

quality_df = pd.DataFrame(quality_metrics)
print(quality_df.to_string(index=False))

# Resumen de calidad
high_quality = sum(1 for m in quality_metrics if '‚úì' in m['Calidad'])
medium_quality = sum(1 for m in quality_metrics if '‚ö†' in m['Calidad'])
low_quality = sum(1 for m in quality_metrics if '‚úó' in m['Calidad'])

print(f"\nüìä Resumen de Calidad:")
print(f"   - Datasets de alta calidad: {high_quality}")
print(f"   - Datasets de calidad media: {medium_quality}")
print(f"   - Datasets de baja calidad: {low_quality}")


## 7. Variables Clave Identificadas para Machine Learning

# Identificaci√≥n de variables clave
print("VARIABLES CLAVE PARA MODELOS DE MACHINE LEARNING")
print("="*80)

# Variables para modelo de regresi√≥n
regression_vars = pd.DataFrame({
    'Categor√≠a': [
        'Rendimiento Hist√≥rico',
        'Rendimiento Hist√≥rico',
        'Rendimiento Hist√≥rico',
        'Clasificaci√≥n',
        'Clasificaci√≥n',
        'Clasificaci√≥n',
        'Circuito',
        'Circuito',
        'Constructor',
        'Constructor',
        'Estrategia',
        'Estrategia'
    ],
    'Variable': [
        'avg_lap_time_last_3_races',
        'std_lap_time_last_3_races',
        'best_lap_time_career',
        'qualifying_position',
        'q1_time',
        'q3_time',
        'circuit_length',
        'number_of_turns',
        'constructor_avg_lap_time',
        'constructor_reliability',
        'avg_pit_stop_time',
        'number_of_pit_stops'
    ],
    'Tipo': [
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica'
    ],
    'Importancia Esperada': [
        'Alta',
        'Media',
        'Alta',
        'Alta',
        'Alta',
        'Alta',
        'Media',
        'Media',
        'Alta',
        'Media',
        'Media',
        'Media'
    ]
})

print("\nüìä Variables para Modelo de REGRESI√ìN (Tiempo de Vuelta):")
print(regression_vars.to_string(index=False))

# Variables para modelo de clasificaci√≥n
classification_vars = pd.DataFrame({
    'Categor√≠a': [
        'Posici√≥n Inicial',
        'Rendimiento Reciente',
        'Rendimiento Reciente',
        'Rendimiento Reciente',
        'Hist√≥rico',
        'Hist√≥rico',
        'Constructor',
        'Constructor',
        'Circuito',
        'Experiencia'
    ],
    'Variable': [
        'grid_position',
        'points_last_3_races',
        'avg_position_last_3_races',
        'dnf_last_5_races',
        'career_podium_rate',
        'podiums_at_circuit',
        'constructor_championship_position',
        'teammate_performance',
        'circuit_type',
        'years_in_f1'
    ],
    'Tipo': [
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Num√©rica',
        'Categ√≥rica',
        'Num√©rica'
    ],
    'Importancia Esperada': [
        'Muy Alta',
        'Alta',
        'Alta',
        'Media',
        'Alta',
        'Media',
        'Alta',
        'Media',
        'Baja',
        'Media'
    ]
})

print("\nüìä Variables para Modelo de CLASIFICACI√ìN (Predicci√≥n de Podio):")
print(classification_vars.to_string(index=False))


## 8. Plan de Implementaci√≥n

### 8.1 Arquitectura Propuesta


## 9. Riesgos y Mitigaciones


## 10. Conclusiones y Pr√≥ximos Pasos

### 10.1 Conclusiones del An√°lisis


print("CONCLUSIONES DEL AN√ÅLISIS DE NEGOCIO")
print("="*80)

conclusions = [
    "‚úì Los datos disponibles son suficientes para desarrollar modelos predictivos robustos",
    "‚úì Existe un claro valor de negocio en ambos casos de uso (regresi√≥n y clasificaci√≥n)",
    "‚úì Los stakeholders identificados pueden beneficiarse significativamente de las predicciones",
    "‚úì La calidad de datos es generalmente alta, con algunas √°reas que requieren preprocesamiento",
    "‚úì El plan de implementaci√≥n es realista y alcanzable en 10 semanas"
]

for conclusion in conclusions:
    print(f"\n{conclusion}")

print("\n" + "="*80)
print("\nPR√ìXIMOS PASOS INMEDIATOS:")
print("="*80)

next_steps = [
    "1. Comenzar con la limpieza y preparaci√≥n de datos",
    "2. Desarrollar el pipeline de feature engineering",
    "3. Implementar modelos baseline para establecer benchmarks",
    "4. Crear visualizaciones exploratorias de las variables clave",
    "5. Documentar todos los supuestos y decisiones t√©cnicas"
]

for step in next_steps:
    print(f"\n   {step}")



### 10.2 Resumen Ejecutivo

Este an√°lisis de negocio ha establecido las bases para un proyecto de Machine Learning en Formula 1 con dos casos de uso principales:

1. **Modelo de Regresi√≥n**: Predicci√≥n de tiempos de vuelta promedio
   - Variable objetivo clara y medible
   - Aplicaci√≥n directa en estrategia de carrera
   - M√©tricas de √©xito bien definidas (MAE < 1.5 segundos)

2. **Modelo de Clasificaci√≥n**: Predicci√≥n de podios
   - Alto valor para m√∫ltiples stakeholders
   - Desaf√≠o t√©cnico interesante por desbalance de clases
   - Potencial de monetizaci√≥n significativo

El proyecto est√° listo para avanzar a la fase de implementaci√≥n t√©cnica con un roadmap claro y m√©tricas de √©xito definidas.


